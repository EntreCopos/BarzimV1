// ENUMS
enum UserRole {
  ADMIN
  USER
  SUPPORT
  GUEST
}

enum Genero {
  MASCULINO
  FEMININO
  NAO_BINARIO
  AGENERO
  GENERO_FLUIDO
  BIGENERO
  OUTRO
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//AUTH RELATED
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//USER RELATED
model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  dateOfBirth           DateTime?
  username              String?                @unique
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  isPrivate             Boolean                @default(false)
  genero                Genero
  cep                   String?
  following             UserFollowing[]        @relation("Followers")
  followers             UserFollowing[]        @relation("Following")
  UserCerveja           UserCerveja[]
  userBadges            UserBadges[]
}

//SOCIAL
model UserFollowing {
  id          String   @id @default(cuid())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  isRequested Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

//EXTERNAL ACCOUNT OAUTH CONNECTION
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cervejaria {
  id            Int             @id @default(autoincrement())
  nome          String
  createdAt     DateTime?
  logo          String?
  cervejas      Cerveja[]
  CervejaShadow CervejaShadow[]
}

model TipoCerveja {
  id            Int             @id @default(autoincrement())
  nome          String
  descricao     String
  createdAt     DateTime?
  cervejas      Cerveja[]
  CervejaShadow CervejaShadow[]
}

model Cerveja {
  id                   Int           @id @default(autoincrement())
  mainImage            String
  nomeCerveja          String
  descriCerveja        String?
  teorAlcoolico        Float?
  tempIdeal            String?
  valorIBU             Float?
  corpo                String?
  // marcaId                 Int
  cervejariaId         Int
  tipoCervejaId        Int
  cervejaria           Cervejaria    @relation(fields: [cervejariaId], references: [id])
  // marca                   Marca                 @relation(fields: [marcaId], references: [id])
  tipoCerveja          TipoCerveja   @relation(fields: [tipoCervejaId], references: [id])
  notaMedia            Float?
  ingredientesCerveja  String[]
  harmonizacoesCerveja String[]
  createdAt            DateTime?
  UserCerveja          UserCerveja[]
}

model CervejaShadow {
  id            Int         @id @default(autoincrement())
  mainImage     String
  nomeCerveja   String
  descriCerveja String?
  teorAlcoolico Float?
  tempIdeal     String?
  valorIBU      Float?
  corpo         String?
  cervejariaId  Int
  tipoCervejaId Int
  cervejaria    Cervejaria  @relation(fields: [cervejariaId], references: [id])
  tipoCerveja   TipoCerveja @relation(fields: [tipoCervejaId], references: [id])
  notaMedia     Float?
  ingredientes  String[]
  harmonizacoes String[]
  createdAt     DateTime?
}

model UserCerveja {
  id          Int       @id @default(autoincrement())
  usuarioId   String
  cervejaId   Int
  favorita    Boolean   @default(false)
  queroBeber  Boolean   @default(false)
  jaBebida    Boolean   @default(false)
  reviewTexto String?
  reviewLikes Int?      @default(0)
  nota        Float?
  imagens     String[]
  createdAt   DateTime?
  localizacao String?

  usuario User    @relation(fields: [usuarioId], references: [id])
  cerveja Cerveja @relation(fields: [cervejaId], references: [id])

  @@unique([usuarioId, cervejaId])
}

model Badges {
  id         Int          @id @default(autoincrement())
  name       String
  image      String
  userBadges UserBadges[]
}

model UserBadges {
  id        Int      @id @default(autoincrement())
  userId    String
  badgeId   Int
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id])
  badge Badges @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

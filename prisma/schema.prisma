generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_URL_NON_POOLING")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  dateOfBirth           DateTime?
  username              String?                @unique
  isPrivate             Boolean                @default(false)
  cep                   String?
  genero                Genero?
  bio                   String                 @default("Nada Informado")
  createdAt             DateTime               @default(now())
  link                  String?
  accounts              Account[]
  Activity              Activity[]
  twoFactorConfirmation TwoFactorConfirmation?
  userBadges            UserBadges[]
  UserCerveja           UserCerveja[]
  following             UserFollowing[]        @relation("Followers")
  followers             UserFollowing[]        @relation("Following")
  Liked                 UserLikedUserCerveja[]
}

model UserFollowing {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  isRequested Boolean  @default(false)
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cervejaria {
  id        Int       @id @default(autoincrement())
  nome      String
  logo      String?
  createdAt DateTime? @default(now())
  cervejas  Cerveja[]
}

model TipoCerveja {
  id        Int       @id @default(autoincrement())
  nome      String
  descricao String?
  createdAt DateTime? @default(now())
  cervejas  Cerveja[]
}

model Cerveja {
  id                   Int           @id @default(autoincrement())
  nomeCerveja          String
  teorAlcoolico        Float?
  cervejariaId         Int
  tipoCervejaId        Int
  corpo                String?
  descriCerveja        String?
  mainImage            String
  tempIdeal            String?
  valorIBU             Float?
  notaMedia            Float?
  createdAt            DateTime?     @default(now())
  harmonizacoesCerveja String[]
  ingredientesCerveja  String[]
  cervejaria           Cervejaria    @relation(fields: [cervejariaId], references: [id])
  tipoCerveja          TipoCerveja   @relation(fields: [tipoCervejaId], references: [id])
  UserCerveja          UserCerveja[]
}

model UserCerveja {
  id               Int                @id @default(autoincrement())
  usuarioId        String
  cervejaId        Int
  favorita         Boolean            @default(false)
  queroBeber       Boolean            @default(false)
  jaBebida         Boolean            @default(false)
  reviewTexto      String?
  reviewLikes      Int?               @default(0)
  nota             Float?
  imagens          String[]
  createdAt        DateTime           @default(now())
  localizacao      String?
  cerveja          Cerveja            @relation(fields: [cervejaId], references: [id], onDelete: Cascade)
  usuario          User               @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  UsersLiked       UserLikedUserCerveja[]

  @@unique([usuarioId, cervejaId])
}

model UserLikedUserCerveja {
  id      String      @id @default(cuid())
  userId  String
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedId Int   
  liked   UserCerveja @relation(fields: [likedId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@unique([userId, likedId])
}

model Badges {
  id         Int          @id @default(autoincrement())
  name       String
  image      String
  userBadges UserBadges[]
}

model UserBadges {
  id        Int      @id @default(autoincrement())
  userId    String
  badgeId   Int
  createdAt DateTime @default(now())
  badge     Badges   @relation(fields: [badgeId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Activity {
  id                   String      @id @default(cuid()) @unique
  userId               String
  createdAt            DateTime    @default(now())
  actionType           UserActions
  actionTarget         String?
  actionAdditionalInfo String?
  actionPerformer      User        @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
  GUEST
}

enum Genero {
  MASCULINO
  FEMININO
  NAO_BINARIO
  AGENERO
  GENERO_FLUIDO
  BIGENERO
  OUTRO
  N_INFORMADO
}

enum UserActions {
  LOGGED
  FEATURE_INTERACTED
  BEER_RATED
  PASSWORD_RESTORED
  TWOFA_ACTIVATED
  REVIEW_CREATED
  REVIEW_DELETED
  REVIEW_LIKED
  REVIEW_DISLIKED
  USER_FOLLOWED
  USER_UNFOLLOWED
  REQ_FOLLOW
  REQ_ALLOWED
  SHARED_USER
  SHARED_REVIEW
  SHARED_CONTENT
  PROFILE_UPDATED
  LIST_CREATED
  LIST_ITEM_ADDED
  LIST_ITEM_REMOVED
  LIST_SHARED
  LIST_DELETED
  REPORT_USER
  REPORT_REVIEW
  REPORT_PICTURE
  REPORT_ERROR
  SELLER_REQUESTED
  BADGE_RECEIVED
  EVENT_CREATED
  EVENT_ATTENDED
  EVENT_CANCELLED
}
